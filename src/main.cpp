#include <array>
#include <fstream>
#include <iostream>
#include <vector>

struct file_header
{
	std::vector<unsigned char> signature;
	std::vector<unsigned char> header;
	std::string detected_extension;
};

std::vector<file_header> file_headers = {
	{{ 0x42, 0x4D }, { 0x42, 0x4d, 0x9a, 0xd8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x32, 0x04, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xd8, 0x08, 0x00, 0x12, 0x0b, 0x00, 0x00, 0x12, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x42, 0x47, 0x52, 0x73, 0x8f, 0xc2, 0xf5, 0x28, 0x51, 0xb8, 0x1e, 0x15, 0x1e, 0x85, 0xeb, 0x01, 0x33, 0x33, 0x33, 0x13, 0x66, 0x66, 0x66, 0x26, 0x66, 0x66, 0x66, 0x06, 0x99, 0x99, 0x99, 0x09, 0x3d, 0x0a, 0xd7, 0x03, 0x28, 0x5c, 0x8f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, "bmp"},


};

int main(int argc, char** argv)
{
	if (argc != 2)
	{
		std::cout << "Usage: img-patch ./path_to_image_file\n";
		exit(1);
	}

	// Read in the first 32 bytes to figure out the file type
	std::fstream file(argv[1], std::ios::in | std::ios::binary | std::ios::out);

	std::array<unsigned char, 32> bytes;
	for (size_t i = 0; i < bytes.size(); ++i)
		file.read((char*) &bytes[i], sizeof(unsigned char));

	int file_type = -1;
	for (size_t i = 0; i < file_headers.size(); ++i)
	{
		bool match_found = true;
		for (size_t j = 0; j < file_headers[i].signature.size(); ++j)
		{
			if (file_headers[i].signature[j] != bytes[j])
			{
				match_found = false;
				break;
			}
		}

		if (match_found)
		{
			file_type = i;
			break;
		}
	}

	if (file_type == -1)
	{
		std::cout << "No matching filetype could be recognized.\n";
		exit(1);
	}
	else
	{
		std::cout << "Recognized the filetype as " << file_headers[file_type].detected_extension << "\n";
	}

	// Conver the header into a string
	std::string header_str;
	for (size_t i = 0; i < file_headers[file_type].header.size(); ++i)
		header_str += file_headers[file_type].header[i];

	// Overwrite the beginning of the file
	file.seekp(0, std::ios::beg);
	file.write(header_str.c_str(), header_str.size());

	return 0;
}
